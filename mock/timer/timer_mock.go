// Code generated by MockGen. DO NOT EDIT.
// Source: timer.go
//
// Generated by this command:
//
//	mockgen -source=timer.go -destination=../../mock/timer/timer_mock.go -package=mock_timer
//

// Package mock_timer is a generated GoMock package.
package mock_timer

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTimer is a mock of Timer interface.
type MockTimer struct {
	ctrl     *gomock.Controller
	recorder *MockTimerMockRecorder
	isgomock struct{}
}

// MockTimerMockRecorder is the mock recorder for MockTimer.
type MockTimerMockRecorder struct {
	mock *MockTimer
}

// NewMockTimer creates a new mock instance.
func NewMockTimer(ctrl *gomock.Controller) *MockTimer {
	mock := &MockTimer{ctrl: ctrl}
	mock.recorder = &MockTimerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimer) EXPECT() *MockTimerMockRecorder {
	return m.recorder
}

// Break mocks base method.
func (m *MockTimer) Break(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Break", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Break indicates an expected call of Break.
func (mr *MockTimerMockRecorder) Break(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Break", reflect.TypeOf((*MockTimer)(nil).Break), ctx)
}

// Focus mocks base method.
func (m *MockTimer) Focus(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Focus", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Focus indicates an expected call of Focus.
func (mr *MockTimerMockRecorder) Focus(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Focus", reflect.TypeOf((*MockTimer)(nil).Focus), ctx)
}
