// Code generated by MockGen. DO NOT EDIT.
// Source: reader.go
//
// Generated by this command:
//
//	mockgen -source=reader.go -destination=../../mock/prompt/reader_mock.go -package=mock_prompt
//

// Package mock_prompt is a generated GoMock package.
package mock_prompt

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
	isgomock struct{}
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// ReadCommand mocks base method.
func (m *MockReader) ReadCommand(prompt string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCommand", prompt)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadCommand indicates an expected call of ReadCommand.
func (mr *MockReaderMockRecorder) ReadCommand(prompt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCommand", reflect.TypeOf((*MockReader)(nil).ReadCommand), prompt)
}

// ReadLine mocks base method.
func (m *MockReader) ReadLine(prompt string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLine", prompt)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLine indicates an expected call of ReadLine.
func (mr *MockReaderMockRecorder) ReadLine(prompt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLine", reflect.TypeOf((*MockReader)(nil).ReadLine), prompt)
}
