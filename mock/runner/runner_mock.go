// Code generated by MockGen. DO NOT EDIT.
// Source: runner.go
//
// Generated by this command:
//
//	mockgen -source=runner.go -destination=../../mock/runner/runner_mock.go -package=mock_runner
//

// Package mock_runner is a generated GoMock package.
package mock_runner

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRunner is a mock of Runner interface.
type MockRunner struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerMockRecorder
	isgomock struct{}
}

// MockRunnerMockRecorder is the mock recorder for MockRunner.
type MockRunnerMockRecorder struct {
	mock *MockRunner
}

// NewMockRunner creates a new mock instance.
func NewMockRunner(ctrl *gomock.Controller) *MockRunner {
	mock := &MockRunner{ctrl: ctrl}
	mock.recorder = &MockRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunner) EXPECT() *MockRunnerMockRecorder {
	return m.recorder
}

// EndDay mocks base method.
func (m *MockRunner) EndDay() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndDay")
}

// EndDay indicates an expected call of EndDay.
func (mr *MockRunnerMockRecorder) EndDay() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndDay", reflect.TypeOf((*MockRunner)(nil).EndDay))
}

// Help mocks base method.
func (m *MockRunner) Help() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Help")
	ret0, _ := ret[0].(error)
	return ret0
}

// Help indicates an expected call of Help.
func (mr *MockRunnerMockRecorder) Help() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Help", reflect.TypeOf((*MockRunner)(nil).Help))
}

// Start mocks base method.
func (m *MockRunner) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockRunnerMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRunner)(nil).Start), ctx)
}
