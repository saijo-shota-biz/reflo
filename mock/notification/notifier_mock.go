// Code generated by MockGen. DO NOT EDIT.
// Source: notifier.go
//
// Generated by this command:
//
//	mockgen -source=notifier.go -destination=../../mock/notification/notifier_mock.go -package=mock_notification
//

// Package mock_notification is a generated GoMock package.
package mock_notification

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNotifier is a mock of Notifier interface.
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
	isgomock struct{}
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier.
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance.
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// NotifyBreakComplete mocks base method.
func (m *MockNotifier) NotifyBreakComplete() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyBreakComplete")
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyBreakComplete indicates an expected call of NotifyBreakComplete.
func (mr *MockNotifierMockRecorder) NotifyBreakComplete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyBreakComplete", reflect.TypeOf((*MockNotifier)(nil).NotifyBreakComplete))
}

// NotifyFocusComplete mocks base method.
func (m *MockNotifier) NotifyFocusComplete() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyFocusComplete")
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyFocusComplete indicates an expected call of NotifyFocusComplete.
func (mr *MockNotifierMockRecorder) NotifyFocusComplete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyFocusComplete", reflect.TypeOf((*MockNotifier)(nil).NotifyFocusComplete))
}
