// Code generated by MockGen. DO NOT EDIT.
// Source: logger.go
//
// Generated by this command:
//
//	mockgen -source=logger.go -destination=../../mock/logger/logger_mock.go -package=mock_logger
//

// Package mock_logger is a generated GoMock package.
package mock_logger

import (
	reflect "reflect"

	logger "github.com/saijo-shota-biz/reflo/internal/logger"
	gomock "go.uber.org/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
	isgomock struct{}
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// ReadDay mocks base method.
func (m *MockLogger) ReadDay() ([]logger.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDay")
	ret0, _ := ret[0].([]logger.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDay indicates an expected call of ReadDay.
func (mr *MockLoggerMockRecorder) ReadDay() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDay", reflect.TypeOf((*MockLogger)(nil).ReadDay))
}

// Write mocks base method.
func (m *MockLogger) Write(session logger.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockLoggerMockRecorder) Write(session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockLogger)(nil).Write), session)
}
