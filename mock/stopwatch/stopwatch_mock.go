// Code generated by MockGen. DO NOT EDIT.
// Source: stopwatch.go
//
// Generated by this command:
//
//	mockgen -source=stopwatch.go -destination=../../mock/stopwatch/stopwatch_mock.go -package=mock_stopwatch
//

// Package mock_stopwatch is a generated GoMock package.
package mock_stopwatch

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockStopwatch is a mock of Stopwatch interface.
type MockStopwatch struct {
	ctrl     *gomock.Controller
	recorder *MockStopwatchMockRecorder
	isgomock struct{}
}

// MockStopwatchMockRecorder is the mock recorder for MockStopwatch.
type MockStopwatchMockRecorder struct {
	mock *MockStopwatch
}

// NewMockStopwatch creates a new mock instance.
func NewMockStopwatch(ctrl *gomock.Controller) *MockStopwatch {
	mock := &MockStopwatch{ctrl: ctrl}
	mock.recorder = &MockStopwatchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStopwatch) EXPECT() *MockStopwatchMockRecorder {
	return m.recorder
}

// Elapsed mocks base method.
func (m *MockStopwatch) Elapsed() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Elapsed")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Elapsed indicates an expected call of Elapsed.
func (mr *MockStopwatchMockRecorder) Elapsed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Elapsed", reflect.TypeOf((*MockStopwatch)(nil).Elapsed))
}

// Start mocks base method.
func (m *MockStopwatch) Start() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockStopwatchMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockStopwatch)(nil).Start))
}

// Stop mocks base method.
func (m *MockStopwatch) Stop() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockStopwatchMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockStopwatch)(nil).Stop))
}
